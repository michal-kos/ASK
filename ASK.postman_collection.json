{
	"info": {
		"_postman_id": "07aa7af5-b3f6-4e56-bd6c-316234fe8a73",
		"name": "ASK",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AuthService",
			"item": [
				{
					"name": "Authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b70aab6a-65aa-496d-a2f8-9e3d7bfca24a",
								"exec": [
									"var jsonData = pm.response.json(); pm.environment.set(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "ttestowy",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test1234",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalidate token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb904d22-82b0-40a9-9a96-d0cf1422678b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Check if message is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Token invalidated\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email_address\": \"{{example_email}}\",\n\t\"password\": \"{{example_password}}\",\n\t\"token\": \"{{token}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"token"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "TicketsService",
			"item": [
				{
					"name": "All tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9e4e85e-41a5-40a4-9d12-223d4dd39a44",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Response should be a parsable JSON\", function() {",
									"    pm.expect(jsonResponse).to.be.ok;",
									"});",
									"",
									"pm.test(\"Response body should be an array\", function() {",
									"    pm.expect(jsonResponse).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response body should be in the correct format\", function() {",
									"    for (i = 0; i < jsonResponse.length; i++) {",
									"        pm.expect(jsonResponse[i]._id).to.be.a('string');",
									"        pm.expect(jsonResponse[i].first_name).to.be.a('string');",
									"        pm.expect(jsonResponse[i].last_name).to.be.a('string');",
									"        pm.expect(jsonResponse[i].email_address).to.be.a('string');",
									"        pm.expect(jsonResponse[i].account_type).to.be.a('number');",
									"        pm.expect(jsonResponse[i].address).to.be.a('string');",
									"        pm.expect(jsonResponse[i].password).to.be.a('string');",
									"        pm.expect(jsonResponse[i].creation_date).to.be.a('string');",
									"        if (jsonResponse[i].patient_history) {",
									"            pm.expect(jsonResponse[i].patient_history).to.be.a('array');",
									"            for (j = 0; j < jsonResponse[i].patient_history.length; j++) {",
									"                pm.expect(jsonResponse[i].patient_history[j]._id).to.be.a('string');",
									"                pm.expect(jsonResponse[i].patient_history[j].patient_id).to.be.a('string');",
									"                pm.expect(jsonResponse[i].patient_history[j].value).to.be.a('string');",
									"                pm.expect(jsonResponse[i].patient_history[j].__v).to.be.a('number');",
									"            }",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tickets",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tickets"
							],
							"query": [
								{
									"key": "account_type",
									"value": "1",
									"disabled": true
								},
								{
									"key": "before",
									"value": "2018-12-30",
									"disabled": true
								},
								{
									"key": "after",
									"value": "2020-01-01",
									"disabled": true
								}
							]
						},
						"description": "Endpoint also accepts few filter options:\n- (int) account_type: \n\t- 0 - patient\n\t- 1 - employee\n\t- 2 - admin\n- (date) after: user created after provided date \n- (date) before: user created before provided date"
					},
					"response": []
				},
				{
					"name": "Ticket by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "be4669cb-83fe-49fd-ae39-8b16c64a0fca",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Response should be a parsable JSON\", function() {",
									"    pm.expect(jsonResponse).to.be.ok;",
									"});",
									"",
									"pm.test(\"Response body should be an object\", function() {",
									"    pm.expect(jsonResponse).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response body should be in the correct format\", function() {",
									"    pm.expect(jsonResponse._id).to.be.a('string');",
									"    pm.expect(jsonResponse.first_name).to.be.a('string');",
									"    pm.expect(jsonResponse.last_name).to.be.a('string');",
									"    pm.expect(jsonResponse.email_address).to.be.a('string');",
									"    pm.expect(jsonResponse.account_type).to.be.a('number');",
									"    pm.expect(jsonResponse.address).to.be.a('string');",
									"    pm.expect(jsonResponse.password).to.be.a('string');",
									"    pm.expect(jsonResponse.creation_date).to.be.a('string');",
									"    if (jsonResponse.patient_history) {",
									"        pm.expect(jsonResponse.patient_history).to.be.a('array');",
									"        for (i = 0; i < jsonResponse.patient_history.length; i++) {",
									"            pm.expect(jsonResponse.patient_history[i]._id).to.be.a('string');",
									"            pm.expect(jsonResponse.patient_history[i].patient_id).to.be.a('string');",
									"            pm.expect(jsonResponse.patient_history[i].value).to.be.a('string');",
									"            pm.expect(jsonResponse.patient_history[i].__v).to.be.a('number');",
									"        }",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tickets/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tickets",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "5e95eb472360fc005e514e91"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "53c56072-805f-4bcb-a5a5-c2fa5f535345",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"let jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Login is equal to provided\", function () {",
									"    pm.expect(jsonResponse.email_address).to.eql(pm.environment.get(\"email_address\"));",
									"});",
									"",
									"pm.test(\"Response should be a parsable JSON\", function() {",
									"    pm.expect(jsonResponse).to.be.ok;",
									"});",
									"",
									"pm.test(\"Response body should be an object\", function() {",
									"    pm.expect(jsonResponse).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response body should be in the correct format\", function() {",
									"    pm.expect(jsonResponse._id).to.be.a('string');",
									"    pm.expect(jsonResponse.first_name).to.be.a('string');",
									"    pm.expect(jsonResponse.last_name).to.be.a('string');",
									"    pm.expect(jsonResponse.email_address).to.be.a('string');",
									"    pm.expect(jsonResponse.account_type).to.be.a('number');",
									"    pm.expect(jsonResponse.address).to.be.a('string');",
									"    pm.expect(jsonResponse.password).to.be.a('string');",
									"    pm.expect(jsonResponse.creation_date).to.be.a('string');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dae6323e-a3fd-4854-b1ac-f5c4e81724c1",
								"exec": [
									"var random = Math.random().toString(36).substring(2)",
									"var emailAddress = random + \"@gmail.com\"",
									"",
									"pm.environment.set(\"email_address\", emailAddress);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"summary\": \"Testowy issue\",\n    \"environment\":\"IOS\",\n    \"priority\": \"Critical\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tickets/create",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tickets",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit ticket with ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e7e60cb-2643-470d-bf4e-d57ca40f3a76",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"let jsonResponse = pm.response.json();",
									"",
									"pm.test(\"Response should be a parsable JSON\", function() {",
									"    pm.expect(jsonResponse).to.be.ok;",
									"});",
									"",
									"pm.test(\"Response body should be an object\", function() {",
									"    pm.expect(jsonResponse).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response body should be in the correct format\", function() {",
									"    pm.expect(jsonResponse.first_name).to.be.a('string');",
									"    pm.expect(jsonResponse.last_name).to.be.a('string');",
									"    pm.expect(jsonResponse.email_address).to.be.a('string');",
									"    pm.expect(jsonResponse.account_type).to.be.a('number');",
									"    pm.expect(jsonResponse.address).to.be.a('string');",
									"    pm.expect(jsonResponse.password).to.be.a('string');",
									"    pm.expect(jsonResponse.creation_date).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"summary\": \"Testowy issue update\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tickets/:ticket_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tickets",
								":ticket_id"
							],
							"variable": [
								{
									"key": "ticket_id",
									"value": "5ead6f22f52479023edad2b6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove ticket with ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9095ce23-9497-41e1-9c24-14d6ef4627d3",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/tickets/:ticket_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tickets",
								":ticket_id"
							],
							"variable": [
								{
									"key": "ticket_id",
									"value": "5ead663a39e67100481685b1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create comment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\":\"Test komentarza\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tickets/:ticket_id/comment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tickets",
								":ticket_id",
								"comment"
							],
							"variable": [
								{
									"key": "ticket_id",
									"value": "5ead66c3217ecc00643c5c2a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit comment with ID",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\":\"Test komentarza update\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tickets/comment/:comment_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tickets",
								"comment",
								":comment_id"
							],
							"variable": [
								{
									"key": "comment_id",
									"value": "5ead6d094b3d0f01a4db036c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove comment with ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tickets/comment/:comment_id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tickets",
								"comment",
								":comment_id"
							],
							"variable": [
								{
									"key": "comment_id",
									"value": "5ead6d094b3d0f01a4db036c"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "66576eb6-c7f8-4273-835c-ed1aa406539a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "22fdfe2d-1a26-4208-89d8-2e001058fe01",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}